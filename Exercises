Chapter 2: Program Structure

Exercises

Chessboard
Write a program that creates a string that represents an 8×8 grid, using newline characters to separate lines. At each position of the grid there is either a space or a "#" character. The characters should form a chessboard.

Passing this string to console.log should show something like this:

 # # # #
# # # # 
 # # # #
# # # # 
 # # # #
# # # # 
 # # # #
# # # #
When you have a program that generates this pattern, define a binding size = 8 and change the program so that it works for any size, outputting a grid of the given width and height. 

//input: string
//output: create a chessboard with the design above
//define a binding size that will change over time called max length that holds a height and width 
//iterate through max length as an array, one item at a time 
//define an empty array that will hold final values 
//define a sum that will hold values 
//add input to sum until it reaches max 
//add another line item for input
//if odd line, add space in the front
//if even line, just add 
//return array with new line 

function chessboard(string) {
  var arr = [];
  var bind = 8; 
  var odd = ''; 
  var even = ''; 
  
for (var i = 1; i <= bind; i++) {
  if(i % 2 !== 0) {
    odd += ' '; 
  } else {
    odd += string;
  }
 }

for (var i = 1; i <= bind; i++) {
  if (i % 2 !== 0) {
    even += string;
  } else {
    even += ' '; 
  }
}
 

for (var i = 1; i <= bind; i++) {
  if (i % 2 !== 0) {
    arr.push(odd);  
  } else {
    arr.push(even); 
  }
}
  return arr.join('\n'); 
}


console.log(chessboard('#')); 


---

Chapter 4: Objects and Arrays

Exercises

A list
Objects, as generic blobs of values, can be used to build all sorts of data structures. A common data structure is the list (not to be confused with array). A list is a nested set of objects, with the first object holding a reference to the second, the second to the third, and so on.

let list = {
  value: 1,
  rest: {
    value: 2,
    rest: {
      value: 3,
      rest: null
    }
  }
};
The resulting objects form a chain, like this:

A linked list
A nice thing about lists is that they can share parts of their structure. For example, if I create two new values {value: 0, rest: list} and {value: -1, rest: list} (with list referring to the binding defined earlier), they are both independent lists, but they share the structure that makes up their last three elements. The original list is also still a valid three-element list.

Write a function arrayToList that builds up a list structure like the one shown when given [1, 2, 3] as argument. Also write a listToArray function that produces an array from a list. Then add a helper function prepend, which takes an element and a list and creates a new list that adds the element to the front of the input list, and nth, which takes a list and a number and returns the element at the given position in the list (with zero referring to the first element) or undefined when there is no such element.

If you haven’t already, also write a recursive version of nth.


// Your code here.

console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20
1

Solution: 

function arrayToList(array) {
  //setting list to null because when we iterate backwards, the nested object inside doesn't have anything to reference yet so in this case, it is null 
  let list = null; 
  //define a variable to be the last value in the array 
  var index = array.length - 1; 
  //iterate backwards - helpful when creating a list 
  // we know that the index will be greater than 0 because we are iterating backwards, decreasing one item at a time 
  for (var i = index; i >= 0; i--) {
    //this creates a nested object 
    list = {value: array[i], rest: list};
    }
  return list;
}

function listToArray(list) {
  var arr = [];
  for (let node = list; node; node = node.rest) {
    arr.push(node.value); 
  }
  return arr; 
}

function prepend(element,list) {
  //makes a new lsit and adds element to the beginning of the list 
  return {value: element, rest: list};
}

function nth(list, number) {
  if (!list) {
    return undefined; 
  } else if (number === 0) {
    return list.value; 
  } else {
    return nth(list.rest, number - 1);
  }
}


//recursive functions usually happen at the last else statement 


console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20

--

Deep comparison

The == operator compares objects by identity. But sometimes you’d prefer to compare the values of their actual properties.

Write a function deepEqual that takes two values and returns true only if they are the same value or are objects with the same properties, where the values of the properties are equal when compared with a recursive call to deepEqual.

To find out whether values should be compared directly (use the === operator for that) or have their properties compared, you can use the typeof operator. If it produces "object" for both values, you should do a deep comparison. But you have to take one silly exception into account: because of a historical accident, typeof null also produces "object".

The Object.keys function will be useful when you need to go over the properties of objects to compare them. 


Solution: 

function deepEqual(a,b) {
  //directly comparing both objects
  if (a === b) {
    return true; 
  }
  //comparing if both are objects and if both are not null 
  if (typeof a !== 'object'|| a == null || typeof b !== 'object' || b == null) {
    return false; 
  } 
  //comparing if the length of the objects are the same 
  let keysA = Object.keys(a), keysB = Object.keys(b); 
  if (keysA.length !== keysB.length) {
    return false; 
  }
  //comparing if the properties in the objects are the same 
  for (let key of keysA) {
    //if keys in b does not include keys in a or recursive function, calling the function and starting over from the beginning going through all the conditionals 
    if(!keysB.includes(key) || !deepEqual(a[key], b[key])) {
      return false; 
    }
  }
  return true; 
}


//easier to do all the cases it will return false and then if it passes to return true 

let obj = {here: {is: "an"}, object: 2};
console.log(deepEqual(obj, obj));
// → true
console.log(deepEqual(obj, {here: 1, object: 2}));
// → false
console.log(deepEqual(obj, {here: {is: "an"}, object: 2}));
// → true

---


Chapter 5: Higher-Order Functions 

Exercises

Flattening

Use the reduce method in combination with the concat method to “flatten” an array of arrays into a single array that has all the elements of the original arrays. 

Solution: 

let arrays = [[1, 2, 3], [4, 5], [6]];

function flatten(arrays) {
  return arrays.reduce(function(prev,curr) {
    return prev.concat(curr); 
  }); 
}

console.log(flatten(arrays)); 
// → [1, 2, 3, 4, 5, 6]


Your own loop

Write a higher-order function loop that provides something like a for loop statement. It takes a value, a test function, an update function, and a body function. Each iteration, it first runs the test function on the current loop value and stops if that returns false. Then it calls the body function, giving it the current value. Finally, it calls the update function to create a new value and starts from the beginning.

When defining the function, you can use a regular loop to do the actual looping. 

Solution: 

function loop(start, test, update, body) {
  for (let value = start; test(value); value = update(value)) {
    body(value); 
  }
}


loop(3, n => n > 0, n => n - 1, console.log);
// → 3
// → 2
// → 1

----

Everything

Analogous to the some method, arrays also have an every method. This one returns true when the given function returns true for every element in the array. In a way, some is a version of the || operator that acts on arrays, and every is like the && operator.

Implement every as a function that takes an array and a predicate function as parameters. Write two versions, one using a loop and one using the some method. 

Solution: 

function every(array, test) {
  for (let element of array) {
    if (!test(element)) {
      return false; 
    }
  }
  return true; 
}

function every(array,test) {
  //return true if none of the array elements
 return !array.some(function(element) {
   //if the elements fail the test 
    return !test(element); 
  });
}

console.log(every([1, 3, 5], n => n < 10));
// → true
console.log(every([2, 4, 16], n => n < 10));
// → false
console.log(every([], n => n < 10));
// → true

---

Dominant writing direction

Write a function that computes the dominant writing direction in a string of text. Remember that each script object has a direction property that can be "ltr" (left to right), "rtl" (right to left), or "ttb" (top to bottom).

The dominant direction is the direction of a majority of the characters that have a script associated with them. The characterScript and countBy functions defined earlier in the chapter are probably useful here.

Solution: 

function dominantDirection(text) {
  let counted = countBy(text, char => {
    let script = characterScript(char.codePointAt(0));
    return script ? script.direction : "none";
  }).filter(({name}) => name != "none");

  if (counted.length == 0) return "ltr";

  return counted.reduce((a, b) => a.count > b.count ? a : b).name;
}

console.log(dominantDirection("Hello!"));
// → ltr
console.log(dominantDirection("Hey, مساء الخير"));
// → rtl
